#!/usr/bin/env python

import os.path
import shutil
import multiprocessing
import subprocess
import signal
import re
import glob
import argparse
import configparser
import tracer, angr, simuvex, driller, fuzzer
from ui.console import ConsoleUI
import modules.banner, modules.binInfo

CHECK_INTERVAL = 5

def checkFuzzerStatus(signum, frame):
    # NOTE: Assuming the only smart fuzzer will allways be SESSION000
    global config
    fuzzer_stats_file = os.path.join(config['outDir'],"SESSION000","fuzzer_stats")
    with open(fuzzer_stats_file,"r") as f:
        fuzzer_stats = f.read()

    cycles_done = int(re.search("\ncycles_done +: (\d+)\n",fuzzer_stats).group(1))

    # Have we completed another cycle?
    if cycles_done > config['cycles_done']:
        print("We completed another cycle")
        config['cycles_done'] = cycles_done
        newCycle()

    # Reset our alarm
    signal.alarm(CHECK_INTERVAL)

def newCycle():
    global config
    # Perform cleaning actions and start up the next cycle
    
    print("Pausing AFL")
    # First off, shut down our current fuzzing
    #subprocess.check_output("afl-multikill")
    subprocess.check_output("killall afl-fuzz",shell=True)

    # Grab the active queues
    # TODO: Change this to be pythonic so that it'll work more generally...
    tmpDir = os.path.abspath('tmpOut')
    
    os.mkdir(tmpDir)
    
    print("Copying queues")
    # Copy over the queues
    queue_files = glob.glob("out/*/queue/*")
    # Uniquely indexing for now
    i = 0
    for f in queue_files:
        base = os.path.basename(f)
        base += "_{0}".format(i)
        shutil.copyfile(f,os.path.join(tmpDir,base))
        i += 1

    print("Minimizing corpus")
    # Minimize the corpus
    tmpDirCMin = os.path.abspath('tmpOut.cmin')
    os.mkdir(tmpDirCMin)
    # TODO: Add non-qemu here
    subprocess.check_output("afl-cmin -i {0} -o {1} -Q -m {4} -- {2} {3}".format(tmpDir,tmpDirCMin,config['target'],config['cmdline'],config["memory"]),shell=True)

    # Done w/ tmpDir
    shutil.rmtree(tmpDir)


    # Optimize test cases
    print("Optimizing test cases")
    tmpDirTMin = os.path.abspath('tmpOut.tmin')
    os.mkdir(tmpDirTMin)

    for test_case in glob.glob(os.path.join(tmpDirCMin,"*")):
        # TODO: Add non-qemu here
        print("Optimizing test case {0}".format(os.path.basename(test_case)))
        outFile = os.path.join(tmpDirTMin,os.path.basename(test_case))
        subprocess.check_output("afl-tmin -i \"{0}\" -o \"{1}\" -Q -m {4} -- {2} {3}".format(test_case,outFile,config['target'],config['cmdline'],config["memory"]),shell=True)


    shutil.rmtree(tmpDirCMin)

    # Re-seed
    print("Re-seeding")
    for seed in glob.glob("out/*/queue/*"):
        os.remove(seed)

    i = 0
    for queue in glob.glob("out/*/queue"):
        for seed in glob.glob(os.path.join(tmpDirTMin,"*")):
            base = os.path.basename(seed)
            base = base.split("_")[0] # Little bit of cleanup
            shutil.copyfile(seed,os.path.join(queue,base)) 
            i += 1

    # Remove tmpdir
    shutil.rmtree(tmpDirTMin)

    # Resume
    print("Resuming search")
    runAFL('resume')

    print("Done")

def preChecks():
    # Checking for files that are needed
    if shutil.which("afl-fuzz") == None:
        print("Must have afl-fuzz installed: http://lcamtuf.coredump.cx/afl/")
        exit(1)

def getConfig():
    config = {}
    config['cycles_done'] = 0
    print("Setting up fuzz configuration")

    #target = input("Target Binary (full or relative path): ")
    target = args.binary[0]

    # Change it to abs path
    target = os.path.abspath(target)
    config["target"] = target
    
    # Ensure the file exists
    if not os.path.isfile(target):
        print("That file doesn't appear to exist...")
        exit(1)


    #cmdline = input("Command line args: ")
    #config["cmdline"] = cmdline

    defaultThreads = multiprocessing.cpu_count()
    #threads = input("Number of cores (default: {0}): ".format(defaultThreads))
    #threads = defaultThreads if threads == "" else int(threads)
    config["threads"] = defaultThreads
 

    #inDir = input("Test Case Dir (default: 'in/'): ")
    #inDir = "in" if inDir == "" else inDir
    workDir = os.path.abspath("work")
    config["workDir"] = workDir


    #outDir = input("Test Case Dir (default: 'out/'): ")
    #outDir = "out" if outDir == "" else outDir
    #outDir = os.path.abspath(outDir)
    #config["outDir"] = outDir


    #memory = input("Max memory (default: 200): ")
    #memory = int(memory) if memory is not "" else 200
    config["memory"] = "8G"
    

    return config


def writeConfig(config):
    with open("autoPwn.config","w") as f:
        f.write("[afl.dirs]\n")
        f.write("work = {0}\n".format(config["workDir"]))
        f.write("\n[target]\n")
        f.write("target = {0}\n".format(config["target"]))
        #f.write("cmdline = {0}\n".format(config["cmdline"]))
        f.write("\n[afl.ctrl]\n")
        f.write("file = \n")
        f.write("timeout = 200+\n")
        f.write("mem_limit = {0}\n".format(config["memory"]))
        f.write("qemu = on\n")
        #f.write("cpu_affinity = {0}".format(' '.join([str(x) for x in range(config['threads'])])) + "\n")
        f.write("\n[afl.behavior]\n")
        f.write("dirty = off\n")
        f.write("dumb = off\n")
        

def readConfig(config_file):
    config = configparser.ConfigParser()
    config.read(config_file)
    newConfig = {}
    newConfig['workDir'] = config['afl.dirs']['work']
    newConfig['target'] = config['target']['target']
    #newConfig['cmdline'] = config['target']['cmdline']
    newConfig['memory'] = int(config['afl.ctrl']['mem_limit'])
    #newConfig['threads'] = len(config['afl.ctrl']['cpu_affinity'].split(" "))
    #newConfig['cycles_done'] = 0 # Intentionally going to be wrong here to initiate path clean
    
    return newConfig

def runAFL(cmd=None):
    cmd = "start" if cmd is None else cmd

    subprocess.check_output("afl-multicore -i - -c autoPwn.config {1} {0}".format(config['threads'],cmd),shell=True)
    # It adds our python instance into the kill file too... Let's remove that :-)
    try:
        subprocess.check_output("grep -v {0} /tmp/afl_multicore.PGID.SESSION > /tmp/afl_multicore.PGID.SESSION2".format(os.getpgid(0)),shell=True)
    except:
        pass
    subprocess.check_output("mv /tmp/afl_multicore.PGID.SESSION2 /tmp/afl_multicore.PGID.SESSION",shell=True)


def printHelp():
    print("autoPwn")
    print("     s == fuzzer (s)tatus")
    print("     e == collect (e)xploits")
    print("     a == collect (a)ll paths")
    print("     m == (m)inimize corpus")
    print("     q == (q)uit")
    print("")

def collectExploits():
        exploits = os.path.abspath('exploits')
        subprocess.check_output("afl-collect -e gdb_script -j {0} -m -r -rr {1} {4} -- {2} {3}".format(config['threads'],config['outDir'],config['target'],config['cmdline'],exploits),shell=True)
        exploitMin = os.path.abspath("exploit_min")
        
        try:
            os.mkdir(exploitMin)
        except:
            pass

        for exp in glob.glob(os.path.join(exploits,"S*")):
            #print("Checking",exp)
            base = os.path.basename(exp)
            o = subprocess.check_output("afl-tmin -i {0} -o {1} -Q -m {4} -- {2} {3}".format(exp,os.path.join(exploitMin,base),config['target'],config['cmdline'],config["memory"]),shell=True)
            #print(o.decode('ascii'))

        shutil.rmtree(exploits)

        print("Completed. Exploits in directory {0}".format(exploitMin))

def collectAllPaths():
        paths = os.path.abspath('paths')
        os.mkdir(paths)

        # TODO: Handle this better. Sometimes there will be dups
        try:
            subprocess.check_output("cp {0}/*/queue/* {1}".format(config['outDir'],paths),shell=True)
        except:
            pass

        pathsCMin = os.path.abspath("paths_cmin")
        
        try:
            os.mkdir(pathsCMin)
        except:
            pass

        subprocess.check_output("afl-cmin -i {0} -o {1} -Q -m {2} -- {3} {4}".format(paths,pathsCMin,config["memory"],config["target"],config["cmdline"]),shell=True)


        pathsMin = os.path.abspath("paths_min")
        
        try:
            os.mkdir(pathsMin)
        except:
            pass

        for exp in glob.glob(os.path.join(pathsCMin,"*")):
            #print("Checking",exp)
            base = os.path.basename(exp)
            o = subprocess.check_output("afl-tmin -i {0} -o {1} -Q -m {4} -- {2} {3}".format(exp,os.path.join(pathsMin,base),config['target'],config['cmdline'],config["memory"]),shell=True)
            #print(o.decode('ascii'))

        shutil.rmtree(paths)
        shutil.rmtree(pathsCMin)

        print("Completed. Paths in directory {0}".format(pathsMin))


def setupUI():
    global console
    console = ConsoleUI()

    console.createView("MainMenu")
    console.setActiveView("MainMenu")
    console.registerModule(modules.banner.Banner(),height=20)
    console.registerModule(modules.binInfo.BinInfo(proj,cfg),height=20)
    


parser = argparse.ArgumentParser(description='Automate some basic fuzzing management')
parser.add_argument('binary', type=str, nargs=1,
                    help = "Binary to auto fuzz")
parser.add_argument('config_file', type=str, nargs='?',
                    help='(optional) an existing autoPwn config file to resume execution')
parser.add_argument('--no-auto-min', dest='no_auto_min', action='store_true',
                    help='Remove auto-prune functionality. It can still be done on-demand')
parser.set_defaults(no_auto_min=True)
args = parser.parse_args()

#print(args.binary[0])

#print(args.no_auto_min)

#preChecks()

if args.config_file is None:

    config = getConfig()
    
    writeConfig(config)

else:
    config = readConfig(args.config_file)

# Load up the binary
print("Loading up the binary")
proj = angr.Project(config['target'],load_options={'auto_load_libs': False})
cfg = proj.analyses.CFG()

setupUI()


console.draw()

exit(0)

if not args.no_auto_min:
    # Start up our watcher
    signal.signal(signal.SIGALRM, checkFuzzerStatus)
    signal.alarm(CHECK_INTERVAL)

while True:
    i = input("autoPwn> ").lower()

    if i == "q" or i == "quit":
        subprocess.check_output("killall afl-fuzz",shell=True)
        print("Bye!")
        exit(0)

    elif i == "h" or i == "help":
        printHelp()
    
    elif i == "s" or i == "status":
        status = subprocess.check_output("afl-whatsup {0}".format(config['outDir']),shell=True)
        print(status.decode('ascii'))

    elif i == "e":
        print("Collecting viable exploits")
        collectExploits()

    elif i == "a":
        print("Collecting all paths")
        collectAllPaths()

    elif i == "m":
        newCycle()
